[build-system]
requires = ["scikit-build-core", "cython", "cython-cmake"]
build-backend = "scikit_build_core.build"

[project]
name = "pytential"
version = "2024.0"
description = "Evaluate layer and volume potentials accurately. Solve integral equations."
readme = "README.rst"
license = "MIT"
authors = [
    { name = "Andreas Kloeckner", email = "inform@tiker.net" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dependencies = [
    "arraycontext>=2021.1",
    "boxtree>=2021.1",
    "constantdict>=2024.4",
    "loopy>=2024.1",
    "meshmode>=2021.2",
    "modepy>=2021.1",
    "pymbolic>=2024.2",
    "pyopencl>=2022.1",
    "pytools>=2024.1",
    "scipy>=1.2",
    "sumpy>=2022.1",
]

[project.optional-dependencies]
doc = [
    "furo",
    "sphinx>=4",
    "sphinx-copybutton",
]
fmmlib = [
    "pyfmmlib>=2023.1",
]
test = [
    "basedpyright",
    "optype",
    "pytest",
    "ruff",
]

[project.urls]
Documentation = "https://documen.tician.de/pytential"
Homepage = "https://mathema.tician.de/software/pytential"
Repository = "https://github.com/inducer/pytential"

[tool.setuptools.packages.find]
include = [
    "pytential*",
]

[tool.ruff]
preview = true

[tool.ruff.lint]
extend-select = [
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    # "D",    # pydocstyle
    "E",    # pycodestyle
    "F",    # pyflakes
    "G",    # flake8-logging-format
    "I",    # flake8-isort
    "N",    # pep8-naming
    "NPY",  # numpy
    "Q",    # flake8-quotes
    "RUF",  # ruff
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "TC",
]
extend-ignore = [
    "C90",  # McCabe complexity
    "E226", # missing whitespace around arithmetic operator
    "E402", # module level import not at the top of file
    "N802", # function name should be lowercase
    "N803", # argument name should be lowercase
    "N806", # variable name should be lowercase
    "RUF012", # ClassVar for mutable class attributes
    "RUF022", # __all__ is not sorted
    "UP031", # use f-strings instead of %
    "UP032", # use f-strings instead of .format
]
exclude = [
    "experiments/*.py",
    "pytential/symbolic/old_diffop_primitives.py",
    "pytential/symbolic/pde/maxwell/generalized_debye.py",
]

[tool.ruff.lint.per-file-ignores]
"doc/*.py" = ["I002"]
"examples/*.py" = ["I002"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = [
    "arraycontext",
    "boxtree",
    "loopy",
    "meshmode",
    "modepy",
    "pymbolic",
    "pyopencl",
    "pytools",
    "sumpy",
]
known-local-folder = [
    "pytential",
]
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
markers = [
    "slowtest: mark a test as slow",
]

[tool.typos.default]
extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:\\s*disable-line$"
]

[tool.typos.default.extend-words]
"nd" = "nd"

[tool.basedpyright]
reportImplicitStringConcatenation = "none"
reportUnnecessaryIsInstance = "none"
reportUnusedCallResult = "none"
reportExplicitAny = "none"
reportUnusedParameter = "hint"

# This reports even cycles that are qualified by 'if TYPE_CHECKING'. Not what
# we care about at this moment.
# https://github.com/microsoft/pyright/issues/746
reportImportCycles = "none"

reportPrivateUsage = "hint"

pythonVersion = "3.10"
pythonPlatform = "All"

ignore = [
    "build",
    "doc/_build",
    "doc/conf.py",
    "experiments",
    "pytential/symbolic/old_diffop_primitives.py",
    "pytential/symbolic/pde/maxwell/generalized_debye.py",
]

[[tool.basedpyright.executionEnvironments]]
root = "test"
reportUnknownArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportOperatorIssue = "hint"
reportIndexIssue = "hint"
reportCallIssue = "hint"
reportArgumentType = "hint"
reportPossiblyUnboundVariable = "hint"
reportGeneralTypeIssues = "hint"
reportOptionalSubscript = "hint"
reportUnknownMemberType = "hint"
reportUnknownVariableType = "hint"
reportUnknownParameterType = "hint"
reportMissingParameterType = "hint"
reportAny = "none"
reportImplicitOverride = "hint"
reportUnannotatedClassAttribute = "hint"
reportPrivateLocalImportUsage = "hint"
reportPrivateImportUsage = "hint"
reportPrivateUsage = "hint"
reportUnknownLambdaType = "hint"
reportMissingTypeStubs = "hint"
reportUnusedImport = "none"
